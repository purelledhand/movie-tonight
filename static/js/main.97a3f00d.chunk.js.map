{"version":3,"sources":["movie.js","App.js","serviceWorker.js","index.js"],"names":["MovieRating","_ref2","rating","score","Math","round","span_class","str","i","parseInt","push","react_default","a","createElement","className","MoviePoster","_ref3","poster","alt","src","title","MovieGenre","_ref4","genre","MovieTorrent","_ref5","torrent","href","Movie","_ref","genres","torrents","map","index","key","url","App","state","_renderMovies","movies","_this","movie","src_movie_0","title_long","medium_cover_image","id","console","log","_callApi","fetch","then","response","json","data","catch","err","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","sent","setState","stop","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","querySelector","innerHTML","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97a3f00d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './movie.css';\n\nfunction Movie({title, poster, genres, rating, torrents}) {\n  return (\n    <div className=\"movie-container\">\n      <div className=\"movie__columns\">\n        <MoviePoster poster={poster} alt={title}/>\n      </div>\n      <div className=\"movie__columns\">\n        <h1>{title}</h1>\n        <div className=\"movie__genres\">\n          {genres.map((genre, index) => <MovieGenre genre={genre} key={index}/>)}\n        </div>\n        <MovieRating rating={rating}>\n          <div className=\"movie__rating\">\n          </div>\n        </MovieRating>\n        <div className=\"movie__torrents\">\n          {torrents.map((torrent, index) => <MovieTorrent torrent={torrent.url} key={index}/>)}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction MovieRating({rating}) {\n  const score = Math.round(rating)/2;\n  let span_class = 'movie__score';\n\n  let str = [];\n  for(let i = 0; i < parseInt(score); i++) str.push(Star());\n  score % 1 ? str.push(HalfStar()) : span_class+=' movie__score__margin';\n\n  return (\n    <div className=\"movie__rating\">\n      {str}\n      <span className={span_class}>{score}</span>\n    </div>\n  );\n}\n\nfunction Star() {\n  return <i className=\"fas fa-star movie__star\"></i>;\n}\n\nfunction HalfStar() {\n  return <i className=\"fas fa-star-half movie__star\"></i>;\n}\n\nfunction MoviePoster({poster, alt}) {\n  return (\n    <img src={poster} alt={alt} title={alt} className=\"movie__poster\"/>\n  );\n}\n\nfunction MovieGenre({genre}) {\n  return (\n    <span className=\"movie__genre\">{genre}</span>\n  );\n}\n\nfunction MovieTorrent({torrent}) {\n  return (\n    <a href={torrent}><div className=\"movie__torrent\"><i className=\"fas fa-download\"></i></div></a>\n  );\n}\n\nMovie.propTypes = {\n  title: PropTypes.string.isRequired,\n  poster: PropTypes.string.isRequired,\n  genres: PropTypes.array.isRequired,\n  rating: PropTypes.number.isRequired,\n};\n\nMoviePoster.propTypes = {\n  poster: PropTypes.string.isRequired,\n  alt: PropTypes.string.isRequired,\n};\n\nMovieGenre.propTypes = {\n  genre: PropTypes.string.isRequired,\n};\n\nMovieTorrent.propTypes = {\n  torrent: PropTypes.string.isRequired,\n}\n\nexport default Movie;\n","import React, {Component} from 'react';\nimport './App.css';\nimport Movie from './movie';\n\nclass App extends Component {\n\n  state = {};\n\n  // render : componentWillMount() -> render() -> componentDidMount()\n  // update : componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie) => {\n      return <Movie title={movie.title_long}\n                    poster={movie.medium_cover_image}\n                    key={movie.id}\n                    id={movie.id}\n                    genres={movie.genres}\n                    rating={movie.rating}\n                    torrents={movie.torrents}\n      />\n    });\n    console.log(this.state.movies);\n    return movies;\n  };\n\n  _callApi = () => {\n    return fetch('https://yts.am/api/v2/list_movies.json?sort_by=download_count')\n    .then(response => response.json())\n    .then(json => json.data.movies)\n    .catch(err => err);\n  };\n\n  _getMovies = async () => {\n    const movies = await this._callApi();\n    this.setState({\n      movies\n    });\n  };\n\n  render() {\n    return (\n      <div className={this.state.movies ? \"App\" : \"App--loading\"}>\n        {this.state.movies ? this._renderMovies() : \"Loading\"}\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction Navbar() {\n  return (\n    <div className=\"Navbar\">\n      <h1>MOVIETONIGHT</h1>\n      <div className=\"Navi_list\">\n        <ul>\n          <li>다운로드 많은 순</li>\n          <li>평점 높은 순</li>\n          <li>좋아요 많은 순</li>\n          <li>최근 개봉 순</li>\n          <li>피어 많은 순</li>\n          <li>시드 많은 순</li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n//ReactDOM.render(<Navbar/>, document.getElementById('navigation'));\nReactDOM.render(<App />, document.getElementById('root'));\ndocument.querySelector(\"head\").innerHTML +=\n  '<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.6.3/css/all.css\" integrity=\"sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/\" crossOrigin=\"anonymous\">';\n// ReactDOM.render(component to push, where to push)\n// App 컴포넌트를 id가 root인 element에 넣는다.\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}